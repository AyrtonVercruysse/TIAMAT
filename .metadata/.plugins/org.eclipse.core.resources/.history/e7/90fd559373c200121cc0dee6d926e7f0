package vub.tiamat;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Vector;
import org.mt4j.MTAndroidApplication;
import org.mt4j.components.visibleComponents.shapes.MTRectangle;
import org.mt4j.components.visibleComponents.shapes.MTRectangle.PositionAnchor;
import org.mt4j.components.visibleComponents.widgets.buttons.MTImageButton;
import org.mt4j.input.inputProcessors.IGestureEventListener;
import org.mt4j.input.inputProcessors.MTGestureEvent;
import org.mt4j.input.inputProcessors.componentProcessors.tapProcessor.TapEvent;
import org.mt4j.input.inputProcessors.componentProcessors.tapProcessor.TapProcessor;
import org.mt4j.util.MT4jSettings;
import org.mt4j.util.math.Vector3D;

import processing.core.PImage;
import vub.ast.Node;
import vub.templates.Templates;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.AssetManager;
import android.net.Uri;
import android.os.Environment;
/**
 * This class starts Tiamat.
 * @author Ayrton Vercruysse
 *
 */
public class StartTiamat extends MTAndroidApplication {
	public static Node selected;		// The currently selected node.
	public static Node menuNode;
	public static MTRectangle general; 	// The backbone rectangle.
	public static Vector<Templates> operations = new Vector<Templates>();
	public static Vector<Templates> functions = new Vector<Templates>();
	public static Vector<Templates> myFunctions = new Vector<Templates>();
	public static Vector<Templates> variables = new Vector<Templates>();
	public static Vector<Templates> definitions = new Vector<Templates>();
	AssetManager assetManager;
	public static BufferedWriter out;
	static BufferedWriter templateBuffered;

	@Override
	public void startUp() {
		assetManager =  getAssets();
		addScene(new Tiamat(this, "vub.tiamat", assetManager));
		boolean mExternalStorageAvailable = false;
		boolean mExternalStorageWriteable = false;
		String state = Environment.getExternalStorageState();

		if (Environment.MEDIA_MOUNTED.equals(state)) {
		    // We can read and write the media
		    mExternalStorageAvailable = mExternalStorageWriteable = true;
		    System.out.println("Goowd");
		    File root = Environment.getExternalStorageDirectory();
            File file = new File(root, "sourcecode.txt");
            File templates = new File(root, "templates.xml");
      //     if (assignArr.size() > 0)
      //        {
                try {
                        if (root.canWrite()){
                        FileWriter filewriter = new FileWriter(file);
                        FileWriter filewriter2 = new FileWriter(templates);
                        out = new BufferedWriter(filewriter);
                        templateBuffered = new BufferedWriter(filewriter2);
                        out.write("test");
               /*         for (int i=0; i<assignArr.size(); i++)
                        {
                            out.write(assignArr.get(i) + "\n");
                            Toast.makeText(MainActivity.this, "out: " + assignArr.get(i), Toast.LENGTH_LONG).show();
                        }*/
                        out.close();
                    }
                } catch (IOException e) {
                  //  Log.e("TAG", "Could not write file " + e.getMessage());
                }

		} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
		    // We can only read the media
		    mExternalStorageAvailable = true;
		    mExternalStorageWriteable = false;
		    System.out.println("Goowd2");
		} else {
		    // Something else is wrong. It may be one of many other states, but all we need
		    //  to know is we can neither read nor write
		    mExternalStorageAvailable = mExternalStorageWriteable = false;
		    System.out.println("Goowd3");
		
	}

}
}
