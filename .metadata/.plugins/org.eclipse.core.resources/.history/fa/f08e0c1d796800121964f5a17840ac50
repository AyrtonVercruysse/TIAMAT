package vub.rendering;

import java.util.Vector;

import org.mt4j.MTAndroidApplication;
import org.mt4j.components.TransformSpace;
import org.mt4j.components.visibleComponents.shapes.MTPolygon;
import org.mt4j.components.visibleComponents.shapes.MTRectangle;
import org.mt4j.components.visibleComponents.shapes.MTRectangle.PositionAnchor;
import org.mt4j.components.visibleComponents.widgets.MTTextArea;
import org.mt4j.util.math.Vector3D;

import vub.ast.Definition;
import vub.ast.Node;
import vub.tiamat.StartTiamat;
import vub.rendering.Renderer;

public class RenderManager extends Renderer {
	private float width = 0;
	private float heigth = 0;
	private int indentionsteps;
	private float nodeWidth;
	private float nodeHeigth;
	Vector3D next = new Vector3D(0,0);
	Vector3D under = new Vector3D(0,0);
	MTPolygon node;
	//MTPolygon parent;
	MTRectangle drawing;

	public RenderManager(MTAndroidApplication mtApplication, vub.ast.Node ast) {
		super(mtApplication, ast);
		//this.parent = parent;
		drawing = super.drawing;
		drawing.setNoFill(true);
		drawing.setAnchor(PositionAnchor.UPPER_LEFT);
		//parent.addChild(drawing);
		// TODO Auto-generated constructor stub
	}

	public void MTRectangle(MTRectangle node, String type, Boolean indent, Boolean resetIndent) {
		if (resetIndent)
			indentionsteps = 0;
		render(node, type, indent);
	}

	public MTRectangle render(MTRectangle node, String type, Boolean indent) {
		this.node = node;
		System.out.println("Renderer: Render");
		nodeHeigth = node.getHeightXY(TransformSpace.RELATIVE_TO_PARENT);
		nodeWidth = node.getWidthXY(TransformSpace.RELATIVE_TO_PARENT);
		drawing.addChild(node);
		if (indent)
			indentionsteps++;

		if (type == "next") {
			next();
		} else if (type == "under") {
			under();
		} else {
			System.out.println("RenderManager: Wrong placementtype");
		}
		width = width + nodeWidth;
		heigth = heigth + nodeHeigth;
		//node.setPositionRelativeToParent(new Vector3D(1,1));
		heigth = heigth+2;
		width =width+2;
		drawing.setHeightLocal(heigth+2);
		drawing.setWidthLocal(width+2);
		return drawing;
	}

	public MTRectangle render(MTTextArea node, String type, Boolean indent) {
		System.out.println("Renderer: Render");
		nodeHeigth = node.getHeightXY(TransformSpace.RELATIVE_TO_PARENT);
		nodeWidth = node.getWidthXY(TransformSpace.RELATIVE_TO_PARENT);
		drawing.addChild(node);
		node.setPositionRelativeToParent(new Vector3D(1,1));
		width = width + nodeWidth;
		heigth = heigth + nodeHeigth;
		//node.setPositionRelativeToParent(new Vector3D(1,1));
		heigth = heigth+2;
		width =width+2;
		drawing.setHeightLocal(heigth);
		drawing.setWidthLocal(width);
		return drawing;

		// We enteren een block met een message "naast of onder, afhankelijk van
		// de width en hight wordt gekeken waar dit moet komen
		// Eventueel iets toevoegen voor vaste waarden splittable ofzo.
		// we kunnen aan kindere width vragen, om afhankelijk daarvan te kiezen
		// of we eronder of ernaast zetten.

	}

	private void unindent() {
		indentionsteps = 0;
	}

	private void under() {
		System.out.println("Rendering under");
		
		
		System.out.println("Rendering under2: " + heigth);
		Vector3D newPos = new Vector3D(0, heigth);
		System.out.println("Rendering under3:  " + nodeHeigth);
		node.setPositionRelativeToParent(newPos);
	//	heigth = heigth + nodeHeigth;
	//	width = width + nodeWidth;
	//	node.setPositionRelativeToParent(new Vector3D(1,1));
	//	drawing.setHeightLocal(heigth+2);
	//	drawing.setWidthLocal(width+2);
		//next.setX(width);
		//under.setY(heigth);
		//node.setPositionRelativeToParent(newPos);
	//	drawing.setHeightLocal(height+2);
	//	drawing.setWidthLocal(width+2);
		// TODO Auto-generated method stub

	}

	private void next() {
		// TODO Auto-generated method stub

	}

	@Override
	public void display(
			org.mt4j.components.visibleComponents.shapes.MTRectangle parent,
			Vector3D position) {
		// TODO Auto-generated method stub
		
	}



}
