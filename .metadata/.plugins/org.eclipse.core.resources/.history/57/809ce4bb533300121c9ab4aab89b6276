package vub.rendering;

import org.mt4j.MTAndroidApplication;
import org.mt4j.components.visibleComponents.shapes.MTRectangle;
import org.mt4j.input.gestureAction.TapAndHoldVisualizer;
import org.mt4j.input.inputProcessors.IGestureEventListener;
import org.mt4j.input.inputProcessors.MTGestureEvent;
import org.mt4j.input.inputProcessors.componentProcessors.tapAndHoldProcessor.TapAndHoldEvent;
import org.mt4j.input.inputProcessors.componentProcessors.tapAndHoldProcessor.TapAndHoldProcessor;
import org.mt4j.input.inputProcessors.componentProcessors.tapProcessor.TapEvent;
import org.mt4j.input.inputProcessors.componentProcessors.tapProcessor.TapProcessor;
import org.mt4j.util.math.Vector3D;

import vub.ast.Node;
import vub.menus.miniMenu;
import vub.tiamat.StartTiamat;
import vub.tiamat.Tiamat;

public class Gestures {
	public Gestures(final MTAndroidApplication mtApplication) {
		
		drawing.registerInputProcessor(new TapAndHoldProcessor(mtApplication,
				2000));
		drawing.addGestureListener(TapAndHoldProcessor.class,
				new TapAndHoldVisualizer(mtApplication, getCanvas()));
		drawing.addGestureListener(TapAndHoldProcessor.class,
				new IGestureEventListener() {
					public boolean processGestureEvent(MTGestureEvent ge) {
						TapAndHoldEvent th = (TapAndHoldEvent) ge;
						switch (th.getId()) {
						case TapAndHoldEvent.GESTURE_ENDED:
							if (th.isHoldComplete()) {
								if (drawing.isNoFill() == false) {
									drawing.setNoFill(true);
									vub.ast.Node parent = node.getParent();
									System.out.println("Node" + node.isRoot());
									System.out.println("Parent" + parent);
									if (parent == null) {
										Tiamat.main = ((vub.ast.Comment) node)
												.getContent();
									} else {
										parent.setChild(node,
												((vub.ast.Comment) node)
														.getContent());
									}

								} else {
									drawing.setNoFill(false);
									drawing.setFillColor(green);
									vub.ast.Node parent = node.getParent();
									vub.ast.Node newNode = new vub.ast.Comment(
											parent, node);
									if (parent == null) {
										Tiamat.main = newNode;
									} else {
										parent.setChild(node, newNode);
									}
								}
							}
							break;
						default:
							break;
						}
						return false;
					}
				});
		// The animation to be able to select a node.
		drawing.registerInputProcessor(new TapProcessor(mtApplication, 25,
				true, 350));
		drawing.addGestureListener(TapProcessor.class,
				new IGestureEventListener() {
					public boolean processGestureEvent(MTGestureEvent ge) {
						TapEvent te = (TapEvent) ge;
						if (te.isTapped()) {
							if (StartTiamat.selected == null) {
								System.out.println("new selected");
								StartTiamat.selected = node;
								drawing.setStrokeColor(red);
								if (node.getComments().inUse()) {
									node.getComments().show();
								}
								// if ne value dan show comments.
								// comments.show();
							} else {
								if (StartTiamat.selected == node) {
									System.out.println("selected selected");
									drawing.setStrokeColor(white);
									if (StartTiamat.selected.getComments()
											.inUse()) {
										StartTiamat.selected.getComments()
												.hide();
									}
									StartTiamat.selected = null;
								} else {
									System.out.println("other selected");
									drawing.setStrokeColor(red);
									RenderVisitor.mapping.get(
											StartTiamat.selected).unselect();
									StartTiamat.selected = node;
									if (node.getComments().inUse()) {
										node.getComments().show();
									}
								}
							}
						}
						if (te.isDoubleTap()) {
							System.out.println("Dubbeltapped");

							if (menu == null) {
								menu = new miniMenu(mtApplication, "minimenu");
								StartTiamat.menuNode = node;
								menu.show(drawing);
							} else {
								menu.hide();
								menu = null;

							}
						}
						return false;
					}
				});
	}

	@Override
	public void display(MTRectangle parent, Vector3D position) {
		// TODO Auto-generated method stub

	}

}
